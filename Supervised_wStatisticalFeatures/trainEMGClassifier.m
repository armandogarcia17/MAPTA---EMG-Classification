function [trainedClassifier, validationAccuracy] = trainEMGClassifier(trainingData)
    % trainEMGClassifier(trainingData)
    %  returns a trained classifier and its validation accuracy.
    %  This code recreates the classification model trained in
    %  Classification Learner app.
    %
    %   Input:
    %       trainingData: the training data of same data type as imported
    %        in the app (table or matrix).
    %
    %   Output:
    %       trainedClassifier: a struct containing the trained classifier.
    %        The struct contains various fields with information about the
    %        trained classifier.
    %
    %       trainedClassifier.predictFcn: a function to make predictions
    %        on new data. It takes an input of the same form as this training
    %        code (table or matrix) and returns predictions for the response.
    %        If you supply a matrix, include only the predictors columns (or
    %        rows).
    %
    %       validationAccuracy: a double containing the validation accuracy
    %        score in percent. In the app, the History list displays this
    %        overall accuracy score for each model.
    %
    %  Use the code to train the model with new data.
    %  To retrain your classifier, call the function from the command line
    %  with your original data or new data as the input argument trainingData.
    %
    %  For example, to retrain a classifier trained with the original data set
    %  T, enter:
    %    [trainedClassifier, validationAccuracy] = trainClassifier(T)
    %
    %  To make predictions with the returned 'trainedClassifier' on new data T,
    %  use
    %    yfit = trainedClassifier.predictFcn(T)
    %
    %  To automate training the same classifier with new data, or to learn how
    %  to programmatically train classifiers, examine the generated code.
    
    % Auto-generated by MATLAB on 02-Mar-2016 15:55:28
    
    
    inputTable = trainingData;
    % Extract predictors and response
    % This code processes the data into the right shape for training the
    % classifier.
    predictorNames = {'max1', 'mean1', 'min1', 'var1', 'max2', 'mean2', 'min2', 'var2', 'max3', 'mean3', 'min3', 'var3', 'max4', 'mean4', 'min4', 'var4', 'max5', 'mean5', 'min5', 'var5', 'max6', 'mean6', 'min6', 'var6', 'max7', 'mean7', 'min7', 'var7', 'max8', 'mean8', 'min8', 'var8'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.Action;
    
    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    classificationEnsemble = fitensemble(...
        predictors, ...
        response, ...
        'Bag', ...
        60, ...
        'Tree', ...
        'Type', 'Classification', ...
        'ClassNames', categorical({'Chuck Grip'; 'Fine Pinch'; 'H. Open'; 'Hook Grip'; 'Key Grip'; 'No Move'; 'Power Grip'; 'Thumb Enclosed'; 'Tool Grip'; 'W. Abduction'; 'W. Adduction'; 'W. Extension'; 'W. Flexion'; 'W. Pronation'; 'W. Supination'}));
    
    trainedClassifier.ClassificationEnsemble = classificationEnsemble;
    extractPredictorsFromTableFcn = @(t) t(:, predictorNames);
    predictorExtractionFcn = @(x) extractPredictorsFromTableFcn(x);
    ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
    trainedClassifier.predictFcn = @(x) ensemblePredictFcn(predictorExtractionFcn(x));
    inputTable = trainingData;
    % Extract predictors and response
    % This code processes the data into the right shape for training the
    % classifier.
    predictorNames = {'max1', 'mean1', 'min1', 'var1', 'max2', 'mean2', 'min2', 'var2', 'max3', 'mean3', 'min3', 'var3', 'max4', 'mean4', 'min4', 'var4', 'max5', 'mean5', 'min5', 'var5', 'max6', 'mean6', 'min6', 'var6', 'max7', 'mean7', 'min7', 'var7', 'max8', 'mean8', 'min8', 'var8'};
    predictors = inputTable(:, predictorNames);
    response = inputTable.Action;
    
    
    % Set up holdout validation
    cvp = cvpartition(response, 'Holdout', 0.25);
    trainingPredictors = predictors(cvp.training,:);
    trainingResponse = response(cvp.training,:);
    
    % Train a classifier
    % This code specifies all the classifier options and trains the classifier.
    classificationEnsemble = fitensemble(...
        trainingPredictors, ...
        trainingResponse, ...
        'Bag', ...
        60, ...
        'Tree', ...
        'Type', 'Classification', ...
        'ClassNames', categorical({'Chuck Grip'; 'Fine Pinch'; 'H. Open'; 'Hook Grip'; 'Key Grip'; 'No Move'; 'Power Grip'; 'Thumb Enclosed'; 'Tool Grip'; 'W. Abduction'; 'W. Adduction'; 'W. Extension'; 'W. Flexion'; 'W. Pronation'; 'W. Supination'}));
    
    ensemblePredictFcn = @(x) predict(classificationEnsemble, x);
    validationPredictFcn = @(x) ensemblePredictFcn(x);
    
    % Compute validation accuracy
    validationPredictors = predictors(cvp.test,:);
    validationResponse = response(cvp.test,:);
    
    [validationPredictions, validationScores] = validationPredictFcn(validationPredictors);
    correctPredictions = (validationPredictions == validationResponse);
    validationAccuracy = sum(correctPredictions)/length(correctPredictions);